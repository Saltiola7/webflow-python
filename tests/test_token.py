# This file was auto-generated by Fern from our API Definition.

from webflow import Webflow
from webflow import AsyncWebflow
import typing
from .utilities import validate_response


async def test_authorized_by(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "545bbecb7bdd6769632504a7",
        "email": "some@email.com",
        "firstName": "Some",
        "lastName": "One",
    }
    expected_types: typing.Any = {"id": None, "email": None, "firstName": None, "lastName": None}
    response = client.token.authorized_by()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.token.authorized_by()
    validate_response(async_response, expected_response, expected_types)


async def test_introspect(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "authorization": {
            "id": "55818d58616600637b9a5786",
            "createdOn": "2016-10-03T23:12:00Z",
            "lastUsed": "2016-10-10T21:41:12Z",
            "grantType": "authorization_code",
            "rateLimit": 60,
            "scope": "assets:read,assets:write",
            "authorizedTo": {
                "siteIds": ["62f3b1f7eafac55d0c64ef91"],
                "workspaceIds": ["52f3b1f7eafac55d0c64ef91"],
                "userIds": ["545bbecb7bdd6769632504a7"],
            },
        },
        "application": {
            "id": "55131cd036c09f7d07883dfc",
            "description": "My Amazing App",
            "homepage": "https://webflow.com",
            "displayName": "My Amazing App",
        },
    }
    expected_types: typing.Any = {
        "authorization": {
            "id": None,
            "createdOn": "datetime",
            "lastUsed": "datetime",
            "grantType": None,
            "rateLimit": "integer",
            "scope": None,
            "authorizedTo": {
                "siteIds": ("list", {0: None}),
                "workspaceIds": ("list", {0: None}),
                "userIds": ("list", {0: None}),
            },
        },
        "application": None,
    }
    response = client.token.introspect()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.token.introspect()
    validate_response(async_response, expected_response, expected_types)
