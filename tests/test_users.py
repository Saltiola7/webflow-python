# This file was auto-generated by Fern from our API Definition.

from webflow import Webflow
from webflow import AsyncWebflow
import typing
from .utilities import validate_response
from webflow.resources.users import UsersUpdateRequestData


async def test_list_(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "count": 5,
        "limit": 5,
        "offset": 0,
        "total": 201,
        "users": [
            {
                "id": "6287ec36a841b25637c663df",
                "isEmailVerified": False,
                "lastUpdated": "2022-05-20T13:46:12Z",
                "invitedOn": "2016-10-24T19:41:29Z",
                "createdOn": "2022-05-20T13:46:12Z",
                "lastLogin": "2016-10-24T19:41:29Z",
                "status": "unverified",
                "accessGroups": [{"slug": "vogon-construction-crew", "type": "admin"}],
            },
            {
                "id": "6287ec36a841b25637c663f0",
                "isEmailVerified": False,
                "lastUpdated": "2022-05-19T05:32:04Z",
                "invitedOn": "2016-10-24T19:41:29Z",
                "createdOn": "2022-05-19T05:32:04Z",
                "lastLogin": "2016-10-24T19:41:29Z",
                "status": "unverified",
                "accessGroups": [{"slug": "improbability-drive-test-subjects", "type": "admin"}],
            },
            {
                "id": "6287ec36a841b25637c663d9",
                "isEmailVerified": True,
                "lastUpdated": "2022-05-17T03:34:06Z",
                "invitedOn": "2016-10-24T19:41:29Z",
                "createdOn": "2022-05-17T03:34:06Z",
                "lastLogin": "2016-10-24T19:41:29Z",
                "status": "verified",
                "accessGroups": [{"slug": "heart-of-gold-crew", "type": "admin"}],
            },
            {
                "id": "6287ec37a841b25637c6641b",
                "isEmailVerified": False,
                "lastUpdated": "2022-05-15T03:46:09Z",
                "invitedOn": "2016-10-24T19:41:29Z",
                "createdOn": "2022-05-15T03:46:09Z",
                "lastLogin": "2016-10-24T19:41:29Z",
                "status": "unverified",
                "accessGroups": [{"slug": "hitchhikers-guide-research-team", "type": "admin"}],
            },
            {
                "id": "6287ec37a841b25637c66449",
                "isEmailVerified": True,
                "lastUpdated": "2022-05-15T02:55:38Z",
                "invitedOn": "2016-10-24T19:41:29Z",
                "createdOn": "2022-05-15T02:55:38Z",
                "lastLogin": "2016-10-24T19:41:29Z",
                "status": "verified",
                "accessGroups": [{"slug": "milliways-reservationists", "type": "admin"}],
            },
        ],
    }
    expected_types: typing.Any = {
        "count": None,
        "limit": None,
        "offset": None,
        "total": None,
        "users": (
            "list",
            {
                0: {
                    "id": None,
                    "isEmailVerified": None,
                    "lastUpdated": "datetime",
                    "invitedOn": "datetime",
                    "createdOn": "datetime",
                    "lastLogin": "datetime",
                    "status": None,
                    "accessGroups": ("list", {0: {"slug": None, "type": None}}),
                },
                1: {
                    "id": None,
                    "isEmailVerified": None,
                    "lastUpdated": "datetime",
                    "invitedOn": "datetime",
                    "createdOn": "datetime",
                    "lastLogin": "datetime",
                    "status": None,
                    "accessGroups": ("list", {0: {"slug": None, "type": None}}),
                },
                2: {
                    "id": None,
                    "isEmailVerified": None,
                    "lastUpdated": "datetime",
                    "invitedOn": "datetime",
                    "createdOn": "datetime",
                    "lastLogin": "datetime",
                    "status": None,
                    "accessGroups": ("list", {0: {"slug": None, "type": None}}),
                },
                3: {
                    "id": None,
                    "isEmailVerified": None,
                    "lastUpdated": "datetime",
                    "invitedOn": "datetime",
                    "createdOn": "datetime",
                    "lastLogin": "datetime",
                    "status": None,
                    "accessGroups": ("list", {0: {"slug": None, "type": None}}),
                },
                4: {
                    "id": None,
                    "isEmailVerified": None,
                    "lastUpdated": "datetime",
                    "invitedOn": "datetime",
                    "createdOn": "datetime",
                    "lastLogin": "datetime",
                    "status": None,
                    "accessGroups": ("list", {0: {"slug": None, "type": None}}),
                },
            },
        ),
    }
    response = client.users.list(site_id="580e63e98c9a982ac9b8b741")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.list(site_id="580e63e98c9a982ac9b8b741")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "6287ec36a841b25637c663df",
        "isEmailVerified": True,
        "lastUpdated": "2022-05-20T13:46:12Z",
        "invitedOn": "2022-05-20T13:46:12Z",
        "createdOn": "2022-05-20T13:46:12Z",
        "lastLogin": "2022-05-20T13:46:12Z",
        "status": "verified",
        "accessGroups": [{"slug": "webflowers", "type": "admin"}],
        "data": {
            "data": {
                "name": "name",
                "email": "email",
                "accept-privacy": True,
                "accept-communications": True,
                "additionalProperties": "additionalProperties",
            }
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "isEmailVerified": None,
        "lastUpdated": "datetime",
        "invitedOn": "datetime",
        "createdOn": "datetime",
        "lastLogin": "datetime",
        "status": None,
        "accessGroups": ("list", {0: {"slug": None, "type": None}}),
        "data": {
            "data": {
                "name": None,
                "email": None,
                "accept-privacy": None,
                "accept-communications": None,
                "additionalProperties": None,
            }
        },
    }
    response = client.users.get(site_id="580e63e98c9a982ac9b8b741", user_id="580e63e98c9a982ac9b8b741")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.get(
        site_id="580e63e98c9a982ac9b8b741", user_id="580e63e98c9a982ac9b8b741"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Webflow, async_client: AsyncWebflow) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.users.delete(site_id="580e63e98c9a982ac9b8b741", user_id="580e63e98c9a982ac9b8b741")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.users.delete(site_id="580e63e98c9a982ac9b8b741", user_id="580e63e98c9a982ac9b8b741")  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "6287ec36a841b25637c663df",
        "isEmailVerified": True,
        "lastUpdated": "2022-05-20T13:46:12Z",
        "invitedOn": "2022-05-20T13:46:12Z",
        "createdOn": "2022-05-20T13:46:12Z",
        "lastLogin": "2022-05-20T13:46:12Z",
        "status": "verified",
        "accessGroups": [{"slug": "webflowers", "type": "admin"}],
        "data": {
            "data": {
                "name": "name",
                "email": "email",
                "accept-privacy": True,
                "accept-communications": True,
                "additionalProperties": "additionalProperties",
            }
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "isEmailVerified": None,
        "lastUpdated": "datetime",
        "invitedOn": "datetime",
        "createdOn": "datetime",
        "lastLogin": "datetime",
        "status": None,
        "accessGroups": ("list", {0: {"slug": None, "type": None}}),
        "data": {
            "data": {
                "name": None,
                "email": None,
                "accept-privacy": None,
                "accept-communications": None,
                "additionalProperties": None,
            }
        },
    }
    response = client.users.update(
        site_id="580e63e98c9a982ac9b8b741",
        user_id="580e63e98c9a982ac9b8b741",
        data=UsersUpdateRequestData(name="Some One", accept_privacy=False, accept_communications=False),
        access_groups=["webflowers", "platinum", "free-tier"],
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.update(
        site_id="580e63e98c9a982ac9b8b741",
        user_id="580e63e98c9a982ac9b8b741",
        data=UsersUpdateRequestData(name="Some One", accept_privacy=False, accept_communications=False),
        access_groups=["webflowers", "platinum", "free-tier"],
    )
    validate_response(async_response, expected_response, expected_types)


async def test_invite(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "6287ec36a841b25637c663df",
        "isEmailVerified": True,
        "lastUpdated": "2022-05-20T13:46:12Z",
        "invitedOn": "2022-05-20T13:46:12Z",
        "createdOn": "2022-05-20T13:46:12Z",
        "lastLogin": "2022-05-20T13:46:12Z",
        "status": "verified",
        "accessGroups": [{"slug": "webflowers", "type": "admin"}],
        "data": {
            "data": {
                "name": "name",
                "email": "email",
                "accept-privacy": True,
                "accept-communications": True,
                "additionalProperties": "additionalProperties",
            }
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "isEmailVerified": None,
        "lastUpdated": "datetime",
        "invitedOn": "datetime",
        "createdOn": "datetime",
        "lastLogin": "datetime",
        "status": None,
        "accessGroups": ("list", {0: {"slug": None, "type": None}}),
        "data": {
            "data": {
                "name": None,
                "email": None,
                "accept-privacy": None,
                "accept-communications": None,
                "additionalProperties": None,
            }
        },
    }
    response = client.users.invite(
        site_id="580e63e98c9a982ac9b8b741", email="some.one@home.com", access_groups=["webflowers"]
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.invite(
        site_id="580e63e98c9a982ac9b8b741", email="some.one@home.com", access_groups=["webflowers"]
    )
    validate_response(async_response, expected_response, expected_types)
