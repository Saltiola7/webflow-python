# This file was auto-generated by Fern from our API Definition.

from webflow import Webflow
from webflow import AsyncWebflow
import typing
from .utilities import validate_response


async def test_list_(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "assets": [
            {
                "id": "63e5889e7fe4eafa7384cea4",
                "contentType": "image/png",
                "size": 2212772,
                "siteId": "63938b302ea6b0aa6f3d8745",
                "hostedUrl": "https://s3.amazonaws.com/webflow-prod-assets/63938b302ea6b0aa6f3d8745/63e5889e7fe4eafa7384cea4_Vectors-Wrapper.svg",
                "originalFileName": "Candy-Wrapper.svg",
                "displayName": "63e5889e7fe4eafa7384cea4_Candy-Wrapper.png",
                "lastUpdated": "2023-03-01T23:42:57Z",
                "createdOn": "2023-02-09T23:58:22Z",
                "variants": [
                    {
                        "hostedUrl": "https://s3.amazonaws.com/webflow-prod-assets/6258612d1ee792848f805dcf/660d83ce30f3a599ddb0bdb3_Screenshot%202024-03-20%20at%209.03.24%E2%80%AFPM-p-500.png",
                        "originalFileName": "Screenshot%202024-03-20%20at%209.03.24%E2%80%AFPM-p-500.png",
                        "displayName": "660d83ce30f3a599ddb0bdb3_Screenshot%202024-03-20%20at%209.03.24%E2%80%AFPM-p-500.png",
                        "format": "png",
                        "width": 500,
                        "height": 900,
                        "quality": 100,
                    }
                ],
                "altText": "A red chair",
            }
        ]
    }
    expected_types: typing.Any = {
        "assets": (
            "list",
            {
                0: {
                    "id": None,
                    "contentType": None,
                    "size": "integer",
                    "siteId": None,
                    "hostedUrl": None,
                    "originalFileName": None,
                    "displayName": None,
                    "lastUpdated": "datetime",
                    "createdOn": "datetime",
                    "variants": (
                        "list",
                        {
                            0: {
                                "hostedUrl": None,
                                "originalFileName": None,
                                "displayName": None,
                                "format": None,
                                "width": "integer",
                                "height": "integer",
                                "quality": "integer",
                            }
                        },
                    ),
                    "altText": None,
                }
            },
        )
    }
    response = client.assets.list(site_id="580e63e98c9a982ac9b8b741")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.list(site_id="580e63e98c9a982ac9b8b741")
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "uploadDetails": {
            "acl": "public-read",
            "bucket": "webflow-bucket-name",
            "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
            "X-Amz-Credential": "<credential-key>/<date>/<region-zone>/s3/aws4_request",
            "X-Amz-Date": "<date-in-iso-like-string>",
            "key": "<siteId>/<fileId>_<filename-with-extension>",
            "Policy": "<a-very-long-alphanumeric-token-with-equal-sign-at-the-end>",
            "X-Amz-Signature": "<one-line-ling-alphanumeric-signature>",
            "success_action_status": "201",
            "content-type": "image/png",
            "Cache-Control": "max-age=31536000, must-revalidate",
        },
        "contentType": "image/png",
        "id": "64358b9544249dc43d37d2b7",
        "parentFolder": "6436b1ce5281cace05b65aea",
        "uploadUrl": "https://s3.amazonaws.com/webflow-dev-assets/643021114e290e0d3a0602b2/64358b9544249dc43d37d2b7_Screenshot%202023-04-11%20at%209.50.42%20AM.png",
        "assetUrl": "https://s3.amazonaws.com/webflow-prod-assets/6258612d1ee792848f805dcf/660d907ab9e91e3e9f56385e_paranoidAndroid-2024.png",
        "hostedUrl": "https://d1otoma47x30pg.cloudfront.net/643021114e290e0d3a0602b2/64358b9544249dc43d37d2b7_Screenshot%202023-04-11%20at%209.50.42%20AM.png",
        "originalFileName": "file.png",
        "createdOn": "2023-04-11T16:32:21Z",
        "lastUpdated": "2023-04-12T20:31:03Z",
    }
    expected_types: typing.Any = {
        "uploadDetails": {
            "acl": None,
            "bucket": None,
            "X-Amz-Algorithm": None,
            "X-Amz-Credential": None,
            "X-Amz-Date": None,
            "key": None,
            "Policy": None,
            "X-Amz-Signature": None,
            "success_action_status": None,
            "content-type": None,
            "Cache-Control": None,
        },
        "contentType": None,
        "id": None,
        "parentFolder": None,
        "uploadUrl": None,
        "assetUrl": None,
        "hostedUrl": None,
        "originalFileName": None,
        "createdOn": "datetime",
        "lastUpdated": "datetime",
    }
    response = client.assets.create(
        site_id="580e63e98c9a982ac9b8b741", file_name="file.png", file_hash="3c7d87c9575702bc3b1e991f4d3c638e"
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.create(
        site_id="580e63e98c9a982ac9b8b741", file_name="file.png", file_hash="3c7d87c9575702bc3b1e991f4d3c638e"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "55131cd036c09f7d07883dfc",
        "contentType": "image/png",
        "size": 1500,
        "siteId": "62749158efef318abc8d5a0f",
        "hostedUrl": "example.com/hostedimage.png",
        "originalFileName": "image.png",
        "displayName": "example-image-123.png",
        "lastUpdated": "2016-09-06T21:12:22Z",
        "createdOn": "2016-09-02T23:26:22Z",
        "variants": [
            {
                "hostedUrl": "example.com/hostedimage.png",
                "originalFileName": "image.png",
                "displayName": "A brown dog",
                "format": "format",
                "width": 1500,
                "height": 900,
                "quality": 1,
                "error": "error",
            }
        ],
        "altText": "A red chair",
    }
    expected_types: typing.Any = {
        "id": None,
        "contentType": None,
        "size": "integer",
        "siteId": None,
        "hostedUrl": None,
        "originalFileName": None,
        "displayName": None,
        "lastUpdated": "datetime",
        "createdOn": "datetime",
        "variants": (
            "list",
            {
                0: {
                    "hostedUrl": None,
                    "originalFileName": None,
                    "displayName": None,
                    "format": None,
                    "width": "integer",
                    "height": "integer",
                    "quality": "integer",
                    "error": None,
                }
            },
        ),
        "altText": None,
    }
    response = client.assets.get(asset_id="580e63fc8c9a982ac9b8b745")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.get(asset_id="580e63fc8c9a982ac9b8b745")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Webflow, async_client: AsyncWebflow) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.assets.delete(asset_id="580e63fc8c9a982ac9b8b745")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.assets.delete(asset_id="580e63fc8c9a982ac9b8b745")  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "55131cd036c09f7d07883dfc",
        "contentType": "image/png",
        "size": 1500,
        "siteId": "62749158efef318abc8d5a0f",
        "hostedUrl": "example.com/hostedimage.png",
        "originalFileName": "image.png",
        "displayName": "example-image-123.png",
        "lastUpdated": "2016-09-06T21:12:22Z",
        "createdOn": "2016-09-02T23:26:22Z",
        "variants": [
            {
                "hostedUrl": "example.com/hostedimage.png",
                "originalFileName": "image.png",
                "displayName": "A brown dog",
                "format": "format",
                "width": 1500,
                "height": 900,
                "quality": 1,
                "error": "error",
            }
        ],
        "altText": "A red chair",
    }
    expected_types: typing.Any = {
        "id": None,
        "contentType": None,
        "size": "integer",
        "siteId": None,
        "hostedUrl": None,
        "originalFileName": None,
        "displayName": None,
        "lastUpdated": "datetime",
        "createdOn": "datetime",
        "variants": (
            "list",
            {
                0: {
                    "hostedUrl": None,
                    "originalFileName": None,
                    "displayName": None,
                    "format": None,
                    "width": "integer",
                    "height": "integer",
                    "quality": "integer",
                    "error": None,
                }
            },
        ),
        "altText": None,
    }
    response = client.assets.update(asset_id="580e63fc8c9a982ac9b8b745")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.update(asset_id="580e63fc8c9a982ac9b8b745")
    validate_response(async_response, expected_response, expected_types)


async def test_list_folders(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "assetFolders": [
            {
                "id": "6390c49774a71f0e3c1a08ee",
                "displayName": "emoji icons",
                "parentFolder": "6390c49774a71f99f21a08eb",
                "assets": ["63e5889e7fe4eafa7384cea4", "659595234426a9fcbad57043"],
                "siteId": "6390c49674a71f84b51a08d8",
                "createdOn": "2018-10-14T21:55:49Z",
                "lastUpdated": "2022-12-07T16:51:37Z",
            }
        ],
        "pagination": {"limit": 1, "offset": 0, "total": 1},
    }
    expected_types: typing.Any = {
        "assetFolders": (
            "list",
            {
                0: {
                    "id": None,
                    "displayName": None,
                    "parentFolder": None,
                    "assets": ("list", {0: None, 1: None}),
                    "siteId": None,
                    "createdOn": "datetime",
                    "lastUpdated": "datetime",
                }
            },
        ),
        "pagination": {"limit": None, "offset": None, "total": None},
    }
    response = client.assets.list_folders(site_id="580e63e98c9a982ac9b8b741")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.list_folders(site_id="580e63e98c9a982ac9b8b741")
    validate_response(async_response, expected_response, expected_types)


async def test_create_folder(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "6390c49774a71f0e3c1a08ee",
        "displayName": "emoji icons",
        "parentFolder": "6390c49774a71f99f21a08eb",
        "assets": ["63e5889e7fe4eafa7384cea4", "659595234426a9fcbad57043"],
        "siteId": "6390c49674a71f84b51a08d8",
        "createdOn": "2018-10-14T21:55:49Z",
        "lastUpdated": "2022-12-07T16:51:37Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "displayName": None,
        "parentFolder": None,
        "assets": ("list", {0: None, 1: None}),
        "siteId": None,
        "createdOn": "datetime",
        "lastUpdated": "datetime",
    }
    response = client.assets.create_folder(site_id="580e63e98c9a982ac9b8b741", display_name="my asset folder")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.create_folder(
        site_id="580e63e98c9a982ac9b8b741", display_name="my asset folder"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get_folder(client: Webflow, async_client: AsyncWebflow) -> None:
    expected_response: typing.Any = {
        "id": "6390c49774a71f0e3c1a08ee",
        "displayName": "emoji icons",
        "parentFolder": "6390c49774a71f99f21a08eb",
        "assets": ["63e5889e7fe4eafa7384cea4", "659595234426a9fcbad57043"],
        "siteId": "6390c49674a71f84b51a08d8",
        "createdOn": "2018-10-14T21:55:49Z",
        "lastUpdated": "2022-12-07T16:51:37Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "displayName": None,
        "parentFolder": None,
        "assets": ("list", {0: None, 1: None}),
        "siteId": None,
        "createdOn": "datetime",
        "lastUpdated": "datetime",
    }
    response = client.assets.get_folder(asset_folder_id="6390c49774a71f0e3c1a08ee")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.assets.get_folder(asset_folder_id="6390c49774a71f0e3c1a08ee")
    validate_response(async_response, expected_response, expected_types)
